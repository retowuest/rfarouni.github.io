install.packages("revealjs")
knit_with_parameters('~/Dropbox/Dissertation/presentation/compbio3.Rmd')
?gls
???gls
?readMat
??readMat
install.packages("matlab")
library("matlab", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("matlabr")
remove.packages("matlab", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
remove.packages("matlabr", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
library("foreign", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
x <-read.octave("/hd2/deepsea_train/test.mat")
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
fit <- cfa(HS.model,
data = HolzingerSwineford1939
estimator= "MLMV",
std.lv = TRUE)
summary(fit, fit.measures = TRUE)
fit <- cfa(HS.model,
data = HolzingerSwineford1939,
estimator= "MLMV",
std.lv = TRUE)
summary(fit, fit.measures = TRUE)
library(ggplot2)
library(effects)
library(data.table)
library(plotly)
install.packages("effects")
library(ggplot2)
library(effects)
library(data.table)
library(plotly)
setwd("~/Downloads/dataandcode/Data Incubator")
Sys.setenv("plotly_username"="collier.262")
Sys.setenv("plotly_api_key"="l8rdgjdFWlYMOXidv1wK")
homes_df <- fread("Neighborhood_Zhvi_AllHomes.csv")
chichomes_df <- subset(homes_df, subset = Metro == "Chicago" & State== "IL")
school12_df <- fread("Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012_.csv")
school15_df <- fread("Chicago_Public_Schools_-_School_Progress_Reports_SY1516.csv")
school_df <- merge(school15_df, school12_df, by.x = "School_ID", by.y = "School ID")
chichomes_df$RegionName <- toupper(chichomes_df$RegionName)
HomSch_df <- merge(school_df, chichomes_df, by.x = "Community Area Name", by.y = "RegionName")
chichomes_yrm <- HomSch_df[,458:469]
HomSch_df$mn <- rowMeans(chichomes_yrm)
HomSch_df$mnf <- rep(NA, length(HomSch_df$mn))
for(i in 1:length(HomSch_df$mn)) {
if(HomSch_df$mn[i] < 50000) {HomSch_df$mnf[i] <- "less than 50"}
if(HomSch_df$mn[i] >= 50000 & HomSch_df$mn[i] < 100000) {HomSch_df$mnf[i] <- "50 to 100"}
if(HomSch_df$mn[i] >= 100000 & HomSch_df$mn[i] < 150000) {HomSch_df$mnf[i] <- "100 to 150"}
if(HomSch_df$mn[i] >= 150000 & HomSch_df$mn[i] < 200000) {HomSch_df$mnf[i] <- "150 to 200"}
if(HomSch_df$mn[i] >= 200000 & HomSch_df$mn[i] < 250000) {HomSch_df$mnf[i] <- "200 to 250"}
if(HomSch_df$mn[i] >= 250000 & HomSch_df$mn[i] < 300000) {HomSch_df$mnf[i] <- "250 to 300"}
if(HomSch_df$mn[i] >= 300000 & HomSch_df$mn[i] < 350000) {HomSch_df$mnf[i] <- "300 to 350"}
if(HomSch_df$mn[i] >= 350000 & HomSch_df$mn[i] < 400000) {HomSch_df$mnf[i] <- "350 to 400"}
# if(HomSch_df$mn[i] == "NA") {HomSch_df$mnf[i] <- "NA"}
}
HomSch_df$mnf <- as.factor(HomSch_df$mnf)
HomSch_df$gscores <- HomSch_df$Student_Growth_Rating
HomSch_df$gscores[HomSch_df$gscores=="FAR ABOVE AVERAGE"] <- 5
HomSch_df$gscores[HomSch_df$gscores=="ABOVE AVERAGE"] <- 4
HomSch_df$gscores[HomSch_df$gscores=="AVERAGE"] <- 3
HomSch_df$gscores[HomSch_df$gscores=="BELOW AVERAGE"] <- 2
HomSch_df$gscores[HomSch_df$gscores=="FAR BELWO AVERAGE"] <- 1
HomSch_df$gscores[HomSch_df$gscores=="NO DATA AVAILABLE"] <- NA
HomSch_df$scores <- HomSch_df$Student_Attainment_Rating
HomSch_df$scores[HomSch_df$scores=="FAR ABOVE AVERAGE"] <- 5
HomSch_df$scores[HomSch_df$scores=="ABOVE AVERAGE"] <- 4
HomSch_df$scores[HomSch_df$scores=="AVERAGE"] <- 3
HomSch_df$scores[HomSch_df$scores=="BELOW AVERAGE"] <- 2
HomSch_df$scores[HomSch_df$scores=="FAR BELWO AVERAGE"] <- 1
HomSch_df$scores[HomSch_df$scores=="NO DATA AVAILABLE"] <- NA
HomSch_df$involvedf<-HomSch_df$School_Survey_Involved_Families
HomSch_df$involvedf[HomSch_df$involvedf=="VERY STRONG"] <- 5
HomSch_df$involvedf[HomSch_df$involvedf=="STRONG"] <- 4
HomSch_df$involvedf[HomSch_df$involvedf=="NEUTRAL"] <- 3
HomSch_df$involvedf[HomSch_df$involvedf=="WEAK"] <- 2
HomSch_df$involvedf[HomSch_df$involvedf=="VERY WEAK"] <- 1
HomSch_df$support<-HomSch_df$School_Survey_Supportive_Environment
HomSch_df$support[HomSch_df$support=="VERY STRONG"] <- 5
HomSch_df$support[HomSch_df$support=="STRONG"] <- 4
HomSch_df$support[HomSch_df$support=="NEUTRAL"] <- 3
HomSch_df$support[HomSch_df$support=="WEAK"] <- 2
HomSch_df$support[HomSch_df$support=="VERY WEAK"] <- 1
HomSch_df$teachers<-HomSch_df$School_Survey_Collaborative_Teachers
HomSch_df$teachers[HomSch_df$teachers=="VERY STRONG"] <- 5
HomSch_df$teachers[HomSch_df$teachers=="STRONG"] <- 4
HomSch_df$teachers[HomSch_df$teachers=="NEUTRAL"] <- 3
HomSch_df$teachers[HomSch_df$teachers=="WEAK"] <- 2
HomSch_df$teachers[HomSch_df$teachers=="VERY WEAK"] <- 1
HomSch_df$safety<-HomSch_df$School_Survey_Safety
HomSch_df$safety[HomSch_df$safety=="VERY STRONG"] <- 5
HomSch_df$safety[HomSch_df$safety=="STRONG"] <- 4
HomSch_df$safety[HomSch_df$safety=="NEUTRAL"] <- 3
HomSch_df$safety[HomSch_df$safety=="WEAK"] <- 2
HomSch_df$safety[HomSch_df$safety=="VERY WEAK"] <- 1
HomSch_df$gscores<-as.numeric(HomSch_df$gscores)
HomSch_df$scores<-as.numeric(HomSch_df$scores)
HomSch_df$involvedf<-as.numeric(HomSch_df$involvedf)
HomSch_df$support<-as.numeric(HomSch_df$support)
HomSch_df$teachers<-as.numeric(HomSch_df$teachers)
HomSch_df$safety<-as.numeric(HomSch_df$safety)
gscores<-HomSch_df$gscores
scores<-HomSch_df$scores
involvedf<-HomSch_df$involvedf
support<-HomSch_df$support
teachers<-HomSch_df$teachers
safety<-HomSch_df$safety
mn<-HomSch_df$mn
mnf<-HomSch_df$mnf
end_df<-cbind(gscores,scores,mn,mnf)
gscorelm <-lm(gscores ~ mnf+teachers, data = HomSch_df)
gmnlm<-lm(mn~gscores+scores, data = HomSch_df)
#scorelm <-lm(scores ~ mnf, data = HomSch_df)
scorelm <-lm(scores ~ mnf+teachers, data = HomSch_df)
mnlm<-lm(mn~scores, data = HomSch_df)
summary(gscorelm)
summary(scorelm)
effectslm <- effect("mnf", scorelm)
effectslmw <- effect("mnf", gscorelm)
effectslm$upper
effectslm$lower
##GG plot for Score LM
schoolGG<-as.data.frame(cbind(effect("mnf", scorelm)$fit, effect("mnf", scorelm)$upper, effect("mnf", scorelm)$lower, c("100 to 150", "150 to 200","200 to 250", "250 to 300","300 to 350", "350 to 400", "50 to 100")))
schoolGG<-as.data.frame(rbind(schoolGG[7,], schoolGG[1:6,]), c(1:7))
schoolGG$V1<-as.numeric(as.character(schoolGG$V1))
schoolGG$V2<-as.numeric(as.character(schoolGG$V2))
schoolGG$V3<-as.numeric(as.character(schoolGG$V3))
schoolGG$V4<-as.character(schoolGG$V4)
schoolGG$V4<-factor(schoolGG$V4, levels=unique(schoolGG$V4))
Score<-ggplot() +
geom_point(aes(x=schoolGG$V4, y=schoolGG$V1), colour = 'red', size = 3) +
geom_errorbar(
aes(x=schoolGG$V4, ymin=schoolGG$V3, ymax=schoolGG$V2),
color='red',
width = 0.4) +
xlab("Price of Housing by $1,000") +
ylab("Average Student Standardized Score") +
ggtitle("Housing Prices predicting Average Standardized Scores"
)
Score
schoolGG1<-as.data.frame(cbind(effect("mnf", gscorelm)$fit, effect("mnf", gscorelm)$upper, effect("mnf", gscorelm)$lower, c("100 to 150", "150 to 200","200 to 250", "250 to 300","300 to 350", "350 to 400", "50 to 100")))
schoolGG1<-as.data.frame(rbind(schoolGG1[7,], schoolGG1[1:6,]), c(1:7))
schoolGG1$V1<-as.numeric(as.character(schoolGG1$V1))
schoolGG1$V2<-as.numeric(as.character(schoolGG1$V2))
schoolGG1$V3<-as.numeric(as.character(schoolGG1$V3))
schoolGG1$V4<-as.character(schoolGG1$V4)
schoolGG1$V4<-factor(schoolGG1$V4, levels=unique(schoolGG1$V4))
growth<-ggplot() +
geom_point(aes(x=schoolGG1$V4, y=schoolGG1$V1), colour = 'red', size = 3) +
geom_line(size = 0.2)+
geom_errorbar(
aes(x=schoolGG1$V4, ymin= schoolGG1$V3, ymax=schoolGG1$V2),
colour = 'red',
width = 0.4) +
xlab("Price of Housing by $1,000") +
ylab("Average Growth of Student Standardized Score") +
ggtitle("Housing Prices predicting Average Standardized Scores"
)
ggplotly(Score)
ggplotly(growth)
ggplotly(Score)
Score
?ggplotly
Score<- ggplot(schoolGG) +
geom_point(aes(x=V4, y=V1), colour = 'red', size = 3) +
geom_errorbar(
aes(x=V4, ymin=V3, ymax=V2),
color='red',
width = 0.4) +
xlab("Price of Housing by $1,000") +
ylab("Average Student Standardized Score") +
ggtitle("Housing Prices predicting Average Standardized Scores"
)
Score
ggplotly(Score)
Score<- ggplot(data=schoolGG, aes(x = V4, y = V1)) +
geom_point(colour = 'red', size = 3) +
geom_errorbar(aes(x=V4, ymin=V3, ymax=V2),
color='red',
width = 0.4) +
xlab("Price of Housing by $1,000") +
ylab("Average Student Standardized Score") +
ggtitle("Housing Prices predicting Average Standardized Scores"
)
Score
View(schoolGG)
Score<- ggplot(data=schoolGG, aes(x = V4, y = V1)) +
geom_point(colour = 'red', size = 3) +
geom_errorbar(aes(ymax=V2, ymin=V3),
color='red',
width = 0.4) +
xlab("Price of Housing by $1,000") +
ylab("Average Student Standardized Score") +
ggtitle("Housing Prices predicting Average Standardized Scores"
)
Score
ggplotly(Score)
ggplotly(Score)
devtools::install_github("GreenleafLab/NucleoATACR")
nucs <- readNucs("test.nucmap_combined.bed.gz")
nucs <- readNucs("/hd2/NucleoATACR/inst/extdata/test.nucmap_combined.bed.gz")
nfrs <- readNFRs("/hd2/NucleoATACR/inst/extdata/test.nfrpos.bed.gz")
library(NucleoATACR)
nucs <- readNucs("/hd2/NucleoATACR/inst/extdata/test.nucmap_combined.bed.gz")
nfrs <- readNFRs("/hd2/NucleoATACR/inst/extdata/test.nfrpos.bed.gz")
signal <- readBedgraph("test.nucleoatac_signal.bedgraph.gz", "chrII", 706551, 707705)
signal <- readBedgraph("/hd2/NucleoATACR/inst/extdata/test.nucleoatac_signal.bedgraph.gz", "chrII", 706551, 707705)
v <- read_vplot("/hd2/NucleoATACR/inst/extdata/test.VMat")
signal
plotV(v)
plotV(v)
read_vplot<-function(file, xlims= NA){
mat = read.delim(file,skip = 7, header=F)
i_lower = scan(file,skip = 3,nmax=1,quiet=T)
i_upper = scan(file,skip = 5,nmax=1,quiet=T)-1
rownames(mat) = i_lower:i_upper
if (is.na(xlims)){
w = round(dim(mat)[2]/2)
colnames(mat) = -w:w
}
else{
colnames(mat) = xlims[1]:xlims[2]
}
return(mat)
}
vplot_theme <-function(base_size = 7, base_family="Helvetica"){
theme(line = element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect = element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5,
vjust = 0.5, angle = 0, lineheight = 0.9),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),#element_line(colour = "black", size = 0.5),
axis.text = element_text(size = rel(0.8), colour = "black"),
axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(hjust = 1),
axis.ticks = element_line(colour = "black", size=0.25),
axis.title.x = element_text(),
axis.title.y = element_text(angle = 90),
axis.ticks.length = unit(0.10, "cm"),
axis.ticks.margin = unit(0.1, "cm"),
legend.background = element_rect(colour = NA),
legend.margin = unit(0.2, "cm"),
legend.key = element_blank(),
legend.key.size = unit(1.2, "lines"),
legend.key.width = unit(0.05, "inches"),
legend.key.height = unit(0.2, "inches"),
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(size = rel(0.8), face = "bold", hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
panel.background = element_blank(),
panel.border = element_rect(fill = NA,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.margin = unit(0.25, "lines"),
panel.margin.x = NULL,
panel.margin.y = NULL,
strip.background = element_blank(),
strip.text.x = element_text(),
strip.text.y = element_text(angle = -90),
plot.background = element_blank(),
plot.title = element_text(size = rel(1.2)),
plot.margin = unit(c(0.5, 0.5, 0.25, 0.25), "lines"), complete = TRUE)
}
pretty_scientific <- function(l) {
# format as scientific
l <- format(l, nsmall = 0, scientific = TRUE)
# remove + sign
l <- gsub("+", "", l, fixed=T)
# break into prefix and suffix
pre <- sapply(l, function(x) substr(x,1,gregexpr("e",x)[[1]][1]-1))
post <- format(as.numeric(sapply(l, function(x) substr(x,gregexpr("e",x)[[1]][1]+1,nchar(x)))))
# combine prefix and suffix with plotmath
out <- sapply(1:length(l), function(x) paste(pre[x],"%*%10^",post[x],sep="",collapse=""))
out[which(pre=="")]=NA
# return as expression
return(parse(text=out))
}
#' Determine order of magnitude
#'
#' @param x number
#' @return numeric
#' @export
order_of_magnitude <- function(x){
if (x==0){
return(0)
}
else if (x< 0){
x = -1 * x
}
return(floor(log10(x)))
}
pretty_scale_format <- function(l){
digits = order_of_magnitude(max(l)) - order_of_magnitude(min(diff(l))) + 2
l = signif(l, digits = digits)
if (max(l)>1000){
return(pretty_scientific(l))
}
else if (max(l)<0.001){
return(pretty_scientific(l))
}
else{return(format(l, nsmall = 0))}
}
plotV <- function(X, xlabel = "Center position relative to dyad (bp)", ylabel = "Fragment size (bp)", guide = "Density", name = NA,
palette = "BuPu", limits = NA, xbreaks = NA, ybreaks = NA){
df = cbind(data.frame("y" = factor(rownames(X), levels = rownames(X), ordered=T)),X)
mdf = reshape2::melt(df, id = "y")
p = ggplot(mdf, aes_string(x="variable", y="y", col = "value")) +
geom_raster(aes_string(fill="value"), interpolate=T) +
coord_fixed()+
xlab(xlabel) + ylab(ylabel)+
vplot_theme(7)
if (is.na(limits[1])){
limits = c(0, max(mdf$value))
}
p = p + scale_fill_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits, breaks = limits, labels = pretty_scale_format, expand=c(0,0), guide = guide_colorbar(ticks = F))+
scale_colour_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits,breaks = limits, labels = pretty_scale_format,expand=c(0,0), guide = F)
if (is.na(xbreaks[1])){
xbreaks = seq(as.numeric(colnames(X)[1]),as.numeric(colnames(X)[ncol(X)]),10)
}
if (is.na(ybreaks[1])){
ybreaks = seq(as.numeric(rownames(X)[1]),as.numeric(rownames(X)[nrow(X)]),10)
}
p = p + scale_x_discrete(breaks = xbreaks) +
scale_y_discrete(breaks = ybreaks)
if (!is.na(name)){
p = p + ggtitle(name) + theme( plot.title = element_text(size = 6, colour = "black"))
}
return(p)
}
plotV(v)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
plotV(v)
xlabel = "Center position relative to dyad (bp)", ylabel = "Fragment size (bp)", guide = "Density", name = NA,
palette = "BuPu", limits = NA, xbreaks = NA, ybreaks = NA
xlabel = "Center position relative to dyad (bp)"
ylabel = "Fragment size (bp)"
guide = "Density"
name = NA
palette = "BuPu"
limits = NA
xbreaks = NA
ybreaks = NA
X <- read_vplot("/hd2/NucleoATACR/inst/extdata/test.VMat")
df = cbind(data.frame("y" = factor(rownames(X), levels = rownames(X), ordered=T)),X)
View(df)
mdf = reshape2::melt(df, id = "y")
p = ggplot(mdf, aes_string(x="variable", y="y", col = "value")) +
geom_raster(aes_string(fill="value"), interpolate=T) +
coord_fixed()+
xlab(xlabel) + ylab(ylabel)
p
if (is.na(limits[1])){
limits = c(0, max(mdf$value))
}
p = p + scale_fill_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits, breaks = limits, labels = pretty_scale_format, expand=c(0,0), guide = guide_colorbar(ticks = F))+
scale_colour_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits,breaks = limits, labels = pretty_scale_format,expand=c(0,0), guide = F)
p
if (is.na(xbreaks[1])){
xbreaks = seq(as.numeric(colnames(X)[1]),as.numeric(colnames(X)[ncol(X)]),10)
}
if (is.na(ybreaks[1])){
ybreaks = seq(as.numeric(rownames(X)[1]),as.numeric(rownames(X)[nrow(X)]),10)
}
p = p + scale_x_discrete(breaks = xbreaks) +
scale_y_discrete(breaks = ybreaks)
if (!is.na(name)){
p = p + ggtitle(name) + theme( plot.title = element_text(size = 6, colour = "black"))
}
p
vplot_theme <-function(base_size = 7, base_family="Helvetica"){
theme(line = element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect = element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5,
vjust = 0.5, angle = 0, lineheight = 0.9),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),#element_line(colour = "black", size = 0.5),
axis.text = element_text(size = rel(0.8), colour = "black"),
axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(hjust = 1),
axis.ticks = element_line(colour = "black", size=0.25),
axis.title.x = element_text(),
axis.title.y = element_text(angle = 90),
axis.ticks.length = unit(0.10, "cm"),
#axis.ticks.margin = unit(0.1, "cm"),
legend.background = element_rect(colour = NA),
#legend.margin = unit(0.2, "cm"),
legend.key = element_blank(),
legend.key.size = unit(1.2, "lines"),
legend.key.width = unit(0.05, "inches"),
legend.key.height = unit(0.2, "inches"),
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(size = rel(0.8), face = "bold", hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
panel.background = element_blank(),
panel.border = element_rect(fill = NA,color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# panel.margin = unit(0.25, "lines"),
# panel.margin.x = NULL,
# panel.margin.y = NULL,
strip.background = element_blank(),
strip.text.x = element_text(),
strip.text.y = element_text(angle = -90),
plot.background = element_blank(),
plot.title = element_text(size = rel(1.2)),
plot.margin = unit(c(0.5, 0.5, 0.25, 0.25), "lines"), complete = TRUE)
}
p = ggplot(mdf, aes_string(x="variable", y="y", col = "value")) +
geom_raster(aes_string(fill="value"), interpolate=T) +
coord_fixed()+
xlab(xlabel) + ylab(ylabel)+
vplot_theme(7)
if (is.na(limits[1])){
limits = c(0, max(mdf$value))
}
p = p + scale_fill_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits, breaks = limits, labels = pretty_scale_format, expand=c(0,0), guide = guide_colorbar(ticks = F))+
scale_colour_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits,breaks = limits, labels = pretty_scale_format,expand=c(0,0), guide = F)
if (is.na(xbreaks[1])){
xbreaks = seq(as.numeric(colnames(X)[1]),as.numeric(colnames(X)[ncol(X)]),10)
}
if (is.na(ybreaks[1])){
ybreaks = seq(as.numeric(rownames(X)[1]),as.numeric(rownames(X)[nrow(X)]),10)
}
p = p + scale_x_discrete(breaks = xbreaks) +
scale_y_discrete(breaks = ybreaks)
if (!is.na(name)){
p = p + ggtitle(name) + theme( plot.title = element_text(size = 6, colour = "black"))
}
p
p = ggplot(mdf, aes_string(x="variable", y="y", col = "value")) +
geom_raster(aes_string(fill="value"), interpolate=T) +
coord_fixed()+
xlab(xlabel) + ylab(ylabel)
if (is.na(limits[1])){
limits = c(0, max(mdf$value))
}
p = p + scale_fill_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits, breaks = limits, labels = pretty_scale_format, expand=c(0,0), guide = guide_colorbar(ticks = F))+
scale_colour_gradientn(colours = c("white",colorRampPalette(RColorBrewer::brewer.pal(9,palette))(9)), name = guide,
limits=limits,breaks = limits, labels = pretty_scale_format,expand=c(0,0), guide = F)
if (is.na(xbreaks[1])){
xbreaks = seq(as.numeric(colnames(X)[1]),as.numeric(colnames(X)[ncol(X)]),10)
}
if (is.na(ybreaks[1])){
ybreaks = seq(as.numeric(rownames(X)[1]),as.numeric(rownames(X)[nrow(X)]),10)
}
p = p + scale_x_discrete(breaks = xbreaks) +
scale_y_discrete(breaks = ybreaks)
if (!is.na(name)){
p = p + ggtitle(name) + theme( plot.title = element_text(size = 6, colour = "black"))
}
p
unlink('compbio3_cache', recursive = TRUE)
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt")
View(x)
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt", sep=" ")
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt", sep=" ")
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt", sep="\t ")
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt", sep="\t")
View(x)
x <- read.csv("/home/rick/Dropbox/Dissertation/VAE_Models/edward_examples/fly_chr2L.txt", sep="\t")
View(x)
hist(x[,2])
hist(x[,3])
hist(x[,4])
hist(x[,5])
hist(x[,6])
hist(x[,7])
hist(x[,8])
hist(x[,9])
hist(x[,10])
hist(x[,11])
